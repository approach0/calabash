[environment]
scripts = ./scripts
configs = ./configs
job_dir = ./jobs
node_prefix = calabash
admin_name = admin
admin_pass = ___

[iaas]
providers = [linode, ucloud]

  [iaas.linode]
  token = ___
  docker_mirror = https://docker.io
  # docker mirror alternatives: https://hub-mirror.c.163.com
  docker_image = ga6840/linode-cli
  docker_registry_user = ___
  docker_registry_pass = ___

    [iaas.linode.config_1]
    region = ap-southeast
    specs = 'g6-nanode-1'
    distro = linode/debian10
    ssh_port = ___
    password = ___

  [iaas.ucloud]
  pubkey = ___
  prikey = ___
  docker_mirror = https://uhub.service.ucloud.cn
  docker_image = ga6840/ucloud-cli
  docker_registry_user = ___
  docker_registry_pass = ___

    [iaas.ucloud.config_1]
    region = cn-gd
    specs = 1cpu-1gb-1mb
    distro = 'Debian_9'
    ssh_port = ___
    password = ___

    [iaas.ucloud.config_2]
    region = cn-gd
    specs = 1cpu-2gb-1mb
    distro = 'Debian_9'
    ssh_port = ___
    password = ___

[network]

  [network.calabash_net]
  driver = overlay

[node_usage]
  [node_usage.host_persistent]
  labels = [
    'host_persistent=true',
    'host_corpus=true'
  ]

  [node_usage.host_indexer]
  labels = [
    'host_indexer=true',
  ]
  install_hooks = [
    'install_fuse',
    'vdisk_producer_daemon 6K' # 6 GiB
  ]

  [node_usage.host_searchd]
  labels = [
    'host_searchd=true'
  ]
  install_hooks = [
    'install_fuse',
    'vdisk_consume_daemon'
  ]

[loop_task]
  [loop_task.1]
  goal = 'iaas:list-nodes'
  reborn = 16000

  [loop_task.2]
  goal = 'swarm:list-nodes?format=json'
  reborn = 5020

  [loop_task.3]
  goal = 'swarm:list-services?format=json'
  reborn = 5030

  [loop_task.4]
  goal = 'swarm:list-tasks'
  reborn = 5040

  [loop_task.5]
  goal = 'swarm:docker-sys-prune'
  reborn = 60000

[service]
bootstrap_services = [
  gateway,
  usersdb, lattice, # forcedly updating these two should happen in order
  calabash, ui_calabash
]

bootstrap_config_path = '/tmp/bootstrap_config'

# See https://docs.docker.com/engine/reference/commandline/service_create
print_arguments = [
  mesh_replicas,
  mesh_sharding,
  max_per_node,
  restart_condition,
  stop_signal,
  limit_memory,
  service_labels,
  constraints,
  mounts,
  environments,
  configs,
  user,
  portmap,
  network,
  docker_image,
  docker_exec
]

  ###
  # Core Services
  ###

  [service.gateway]
  network = calabash_net
  portmap = '80:80'
  #portmap = '8080:80'
  constraints = [
    'node.role==manager',
    'node.labels.host_persistent==true'
  ]
  mounts = [
    'type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock'
  ]
  docker_image = ga6840/gateway

  [service.calabash]
  network = calabash_net
  labels = [
    'gateway.route=calabash',
    'gateway.protect=/runjob',
    'gateway.port=8964'
  ]
  constraints = [
    'node.role==manager',
    'node.labels.host_persistent==true'
  ]
  docker_image = ga6840/calabash
  config_bind = [
    'path:calabash_config:/code/calabash/config.toml'
  ]
  config_source = [
    '$service_bootstrap_config_path',
  ]
  mounts = [
    'type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock'
  ]
  docker_exec = node ./jobd/jobd.js --config ./config.toml

  [service.usersdb]
  network = calabash_net
  labels = [
    'gateway.route=usersdb',
    'gateway.port=80',
    'gateway.protect=/'
  ]
  constraints = [
    'node.labels.host_persistent==true'
  ]
  mounts = [
    'type=volume,src=usersdb_vol,dst=/postgres/data',
  ]
  docker_image = ga6840/postgres13

  [service.lattice]
  network = calabash_net
  env = [
    'LATTICE_DATABASE_HOST=usersdb'
  ]
  constraints = [
    'node.labels.host_persistent==true'
  ]
  config_bind = [
    'text:lattice_entrypoint:/tmp/entrypoint.sh'
  ]
  config_source = [
    '''
    node db.js --init --password INJECT:admin_pass
    node ./authd.js
    '''
  ]
  labels = [
    'gateway.route=auth',
    'gateway.port=19721',
    'gateway.jwt_port=64264',
    'gateway.protect=/forbidden'
  ]
  #docker_image = uhub.service.ucloud.cn/ga6840/lattice
  docker_image = ga6840/lattice
  docker_exec = bash /tmp/entrypoint.sh

  [service.ui_calabash]
  network = calabash_net
  labels = [
    'gateway.route=backend',
    'gateway.port=19985'
  ]
  limit_memory = 300MB
  constraints = [
    'node.labels.host_persistent==true'
  ]
  env = [
    'CALABASH_URL=/calabash'
  ]
  docker_image = ga6840/ui-calabash
  config_bind = [
    'text:ui_calabash_entrypoint:/tmp/entrypoint.sh'
  ]
  config_source = [
    '''
    npm run build
    npm run serve
    '''
  ]
  docker_exec = bash /tmp/entrypoint.sh

  [service.ui_login]
  network = calabash_net
  constraints = [
    'node.labels.host_persistent==true'
  ]
  labels = [
    'gateway.route=login',
    'gateway.port=19985'
  ]
  docker_image = ga6840/ui-login

  [service.monitor]
  network = calabash_net
  constraints = [
    'node.role==manager',
    'node.labels.host_persistent==true'
  ]
  mounts = [
    'type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock',
    'type=volume,src=prometheus_vol,dst=/prometheus'
  ]
  user = 0:0 # default user is nobody, cannot access docker.sock
  config_bind = [
    'path:prometheus_conf:/etc/prometheus/prometheus.yml'
  ]
  config_source = [
    '$configs/prometheus.yml',
  ]
  ## FOR DEBUG ##
  #labels = [
  #  'gateway.route=_root_',
  #  'gateway.port=9090'
  #]

  #docker_image = prom/prometheus@sha256:60190123eb28250f9e013df55b7d58e04e476011911219f5cedac3c73a8b74e6
  docker_image = ga6840/prometheus

  [service.grafana]
  network = calabash_net
  constraints = [
    'node.labels.host_persistent==true'
  ]
  labels = [
    'gateway.route=grafana',
    'gateway.port=3000'
  ]
  env = [
    'GF_PATHS_DATA=/data',
    'GF_SERVER_SERVE_FROM_SUB_PATH=true',
    'GF_SERVER_ROOT_URL=/grafana',
    'GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/admin_password'
  ]
  config_bind = [
    'text:grafana_password:/run/secrets/admin_password'
  ]
  config_source = ['INJECT:admin_pass']
  mounts = [
    'type=volume,src=grafana_vol,dst=/data',
  ]
  user = 0:0
  #docker_image = grafana/grafana
  docker_image = ga6840/grafana

  ###
  # Peripheral Services
  ###

  [service.hello]
  #portmap = 'published=3389,target=8080,mode=ingress' # servcie mesh with only shard#1 publishing port
  #mesh_replicas = 2
  #mesh_sharding = 2

  #portmap = 'published=3389,target=8080,mode=host' # different IP different shard
  #mesh_replicas=1
  #mesh_sharding=2

  portmap = 'published=3389,target=8080,mode=ingress' # round robin-ing hosts
  mesh_replicas=2
  mesh_sharding=1

  docker_image = ga6840/hello-httpd
  config_bind = [
    'text:hello_entrypoint:/tmp/entrypoint.sh'
  ]
  config_source = [
    '''
    node /code/hello.js $(hostname) shard#$@
    '''
  ]
  docker_exec = sh /tmp/entrypoint.sh $shard

  [service.corpus_syncd]
  network = calabash_net
  mesh_sharding = 3
  max_per_node = 1
  mounts = [
    'type=volume,src=corpus_vol,dst=/data',
  ]
  constraints = [
    'node.labels.host_corpus==true'
  ]
  docker_image = ga6840/rsyncd

  config_bind = [
    'path:detect_shards:/tmp/detect-shards.sh',
    'text:corpus_entrypoint:/tmp/entrypoint.sh'
  ]
  config_source = [
    '$scripts/swarm/detect-shards.sh',

    '''
    src=$1

    rsync --daemon --verbose --config=/tmp/rsyncd.conf
    source /tmp/detect-shards.sh

    while true; do
      shards=`detect_shards corpus_syncd 0`
      echo $shards

      for dst in $shards; do
        if [ "$src" != "$dst" ]; then
          rsync -zauv --progress /data/ rsync://$dst/root/
        fi
      done
      sleep 16
    done
    '''
  ]
  docker_exec = bash /tmp/entrypoint.sh $servID

  [service.crawler]
  mesh_sharding = 3
  max_per_node = 1
  mounts = [
    'type=volume,src=corpus_vol,dst=/data',
  ]
  constraints = [
    'node.labels.host_corpus==true'
  ]
  docker_image = ga6840/a0
  config_bind = [
    'text:crawler_entrypoint:/tmp/entrypoint.sh'
  ]
  config_source = [
    '''
    shard=$1
    export PATH="$PATH:/demo/crawler"
    cd /data

    while true; do
      case $shard in

        1)
          crawler-math.stackexchange.com.py  --begin-page     1 --end-page  1000
        ;;

        2)
          crawler-math.stackexchange.com.py  --begin-page  1001 --end-page  7000
          crawler-math.stackexchange.com.py  --begin-page  7001 --end-page 17000
          crawler-math.stackexchange.com.py  --begin-page 17001 --end-page 27000
          crawler-math.stackexchange.com.py  --begin-page 17001 --end-page 27000
        ;;

        3)
          crawler-artofproblemsolving.com.py  -n 0 -o 3650 -c 3
          crawler-artofproblemsolving.com.py  -n 0 -o 3650 -c 4
          crawler-artofproblemsolving.com.py  -n 0 -o 3650 -c 5
          crawler-artofproblemsolving.com.py  -n 0 -o 3650 -c 6
          crawler-artofproblemsolving.com.py  -n 0 -o 3650 -c 7
          crawler-artofproblemsolving.com.py  -n 0 -o 3650 -c 123
          crawler-artofproblemsolving.com.py  -n 0 -o 3650 -c 163
        ;;

        *)
          echo "shard#`${shard}` is not handled!"
        ;;

      esac

      echo "Start over ..."
      sleep 32
    done
    '''
  ]
  docker_exec = bash /tmp/entrypoint.sh $shard

  [service.indexer]
  network = calabash_net
  mesh_sharding = 4
  max_per_node = 1
  mounts = [
    'type=bind,src=/var/tmp/vdisk,dst=/mnt/vdisk'
  ]
  constraints = [
    'node.labels.host_indexer==true'
  ]
  docker_image = ga6840/a0
  config_bind = [
    'text:indexer_entrypoint:/tmp/entrypoint.sh'
  ]
  config_source = [
    '''
    # if there is no such directory (/mnt/vdisk/mnt), indexer will give up and quit
    (flock 100; indexer.out -z -o /mnt/vdisk/mnt/; sync ) 100>/mnt/vdisk/vdisk.lock

    sleep 16 # Give vdisk-producer daemon enough time to create image

    # fall through here to restart service so that mounting point will be refreshed
    '''
  ]
  docker_exec = bash /tmp/entrypoint.sh

  [service.index_syncd]
  network = calabash_net
  mesh_sharding = 4
  max_per_node = 1
  mounts = [
    'type=bind,src=/var/tmp/vdisk,dst=/data'
  ]
  constraints = [
    'node.labels.host_indexer==true'
  ]
  docker_image = ga6840/rsyncd
  docker_exec = 'rsync --daemon --no-detach --verbose --config=/tmp/rsyncd.conf'

  [service.feeder]
  network = calabash_net
  mounts = [
    'type=volume,src=corpus_vol,dst=/data'
  ]
  constraints = [
    'node.labels.host_corpus==true'
  ]
  docker_image = ga6840/a0

  config_bind = [
    'path:detect_shards:/tmp/detect-shards.sh',
    'text:feeder_entrypoint:/tmp/entrypoint.sh'
  ]
  config_source = [
    '$scripts/swarm/detect-shards.sh',
    '''
    source /tmp/detect-shards.sh

    while true; do
      urls=$(for i in $(detect_shards indexer 2); do echo "--indexd-url http://${i}:8934/index"; done)
      set -x
      json-feeder.py --corpus-path /data $urls --bye
      set +x
      echo 'Waiting (long enough to get better chance that indexers are ready)'
      sleep 240
    done
    '''
  ]
  restart_condition = none
  docker_exec = bash /tmp/entrypoint.sh

  [service.searchd]
  portmap = '3389:8921'
  network = calabash_net
  mesh_sharding = 4
  max_per_node = 1
  mounts = [
    'type=bind,src=/var/tmp/vdisk,dst=/mnt/vdisk'
  ]
  constraints = [
    'node.labels.host_searchd==true'
  ]
  docker_image = ga6840/a0

  config_bind = [
    'text:searchd_entrypoint:/tmp/entrypoint.sh'
  ]
  config_source = [
    '''
    shard=$1
    vdisk=/mnt/vdisk

    /usr/sbin/sshd -e

    while true; do
      echo 'checking vdisk mounting point ...'
      if [ ! -e $vdisk/mnt/mstats.bin ]; then
        echo 'mounting point updated, kill sshd and searchd ...'
        kill -INT $(pidof sshd)
        kill -USR1 $(pidof searchd.out)

        echo 'updating vdisk image'
        if [ $shard -eq 1 ]; then
          rsync -zuv --progress rsync://index_syncd/root/vdisk.*.img $vdisk/
        else
          rsync -zuv --progress rsync://index_syncd-shard${shard}/root/vdisk.*.img $vdisk/
        fi

        echo 'wait long enough for index vdisk to be mounted ...'
        sleep 16

        echo 'fall through to restart the service and refresh mounting point ...'
        break
      fi
      sleep 8
    done
    '''
  ]
  stop_signal = SIGUSR1
  docker_exec = bash /tmp/entrypoint.sh $shard

  [service.searchd_mpi_run]
  network = calabash_net
  constraints = [
    'node.labels.host_searchd==true'
  ]
  docker_image = ga6840/a0
  mounts = [
    'type=bind,src=/var/tmp/vdisk,dst=/mnt/vdisk'
  ]
  config_bind = [
    'path:detect_shards:/tmp/detect-shards.sh',
    'text:mpi_entrypoint:/tmp/entrypoint.sh'
  ]
  config_source = [
    '$scripts/swarm/detect-shards.sh',
    '''
    subnet=$1
    source /tmp/detect-shards.sh

    command="searchd.out -i ./mnt -L /mnt/vdisk/vdisk.lock -c 0 -C 0"
    service=searchd
    mountat=/mnt/vdisk

    hosts=`detect_shards $service 2`
    np=$(echo $hosts | wc -w)
    hosts=$(echo $hosts | tr ' ', ',')

    set -x
    ssh root@$service mpirun --allow-run-as-root \
      -np $np --rank-by node \
      --host $hosts --wdir $mountat \
      --mca oob_tcp_if_include $subnet --mca btl_tcp_if_include $subnet \
      $command
    set +x
    '''
  ]
  restart_condition = none
  docker_exec = 'bash /tmp/entrypoint.sh $(swarm_network_space calabash_net)'
