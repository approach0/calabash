[environment]
scripts = ./scripts
job_dir = ./jobs
admin_name = admin
node_prefix = calabash

[iaas]
#providers = [linode, ucloud]
providers = [ucloud]

  [iaas.linode]
  token = ___
  docker_mirror = https://docker.io
  # docker mirror alternatives: https://hub-mirror.c.163.com
  docker_image = ga6840/linode-cli:latest
  docker_registry_user = ___
  docker_registry_pass = ___

    [iaas.linode.config_1]
    region = ap-southeast
    specs = 'g6-nanode-1'
    distro = linode/debian10
    ssh_port = 8921
    password = ___

  [iaas.ucloud]
  pubkey = ___
  prikey = ___
  docker_mirror = https://uhub.service.ucloud.cn
  docker_image = ga6840/ucloud-cli:latest
  docker_registry_user = ___
  docker_registry_pass = ___

    [iaas.ucloud.config_1]
    region = cn-gd
    specs = 1cpu-1gb-1mb
    distro = 'Debian_9'
    ssh_port = 22
    password = ___

[network]

  [network.corpus]
  driver = overlay

[service]
bootstrap_service = calabash
max_restart = 3

# See https://docs.docker.com/engine/reference/commandline/service_create
print_arguments = [
  mesh_replicas,
  mesh_sharding,
  network,
  portmap,
  max_per_node,
  restart_condition,
  constraints,
  docker_image,
  configs,
  mounts,
  docker_exec
]

  [service.calabash]
  portmap = '80:8964'
  constraints = [
    'node.role==manager'
  ]
  docker_image = ga6840/calabash:latest
  config_bind = [
    'path:calabash_config:/code/calabash/config.toml'
  ]
  config_source = [
    '/tmp/bootstrap.config.toml'
  ]
  mounts = [
    'type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock',
    'type=bind,src=/var/log,dst=/mnt/log,ro=false',
  ]
  docker_exec = node ./jobd/jobd.js --config ./config.toml | tee -a /mnt/log/calabash.log

  [service.hello]
  portmap = 'published=3389,target=8080,mode=ingress' # servcie mesh with only shard#1 publishing port
  mesh_replicas = 2
  mesh_sharding = 2

  #portmap = 'published=3389,target=8080,mode=host' # different IP different shard
  #mesh_replicas=1
  #mesh_sharding=2

  #portmap = 'published=3389,target=8080,mode=ingress' # round robin-ing hosts
  #mesh_replicas=2
  #mesh_sharding=1

  docker_image = ga6840/hello-httpd:latest
  config_bind = [
    'text:hello_entrypoint:/tmp/entrypoint.sh'
  ]
  config_source = [
    '''
    node /code/hello.js \$(hostname) shard#\$@
    '''
  ]
  docker_exec = sh /tmp/entrypoint.sh \$shard

  [service.corpus]
  network = corpus
  mesh_sharding = 3
  max_per_node = 1
  mounts = [
    'type=volume,src=corpus,dst=/data,volume-driver=local',
  ]
  docker_image = ga6840/rsyncd

  config_bind = [
    'text:corpus_entrypoint:/tmp/entrypoint.sh'
  ]
  config_source = [
    '''
    rsync --daemon --verbose --config=/tmp/rsyncd.conf

    while true; do
      src=\$1
      for dst in corpus corpus-shard{2..3}; do
        if [ "\$src" != "\$dst" ]; then
          rsync -zauv --progress /data/ rsync://\$dst/root/
        fi
      done
      sleep 8
    done
    '''
  ]
  docker_exec = bash /tmp/entrypoint.sh \$servID
