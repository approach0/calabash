[list-nodes]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  'format=${format-table}',
  '''
  if [ $format == table ]; then
    swarm_print_nodes
  elif [ $format == json ]; then
    curl --unix-socket /var/run/docker.sock http://localhost/nodes 2>/dev/null
  else
    echo "format not supported."
  fi
  '''
]

[list-services]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  'format=${format-table}',
  '''
  if [ $format == table ]; then
    swarm_print_services
  elif [ $format == json ]; then
    curl --unix-socket /var/run/docker.sock http://localhost/services 2>/dev/null
  else
    echo "format not supported."
  fi
  '''
]

[list-tasks]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  '''
  curl --unix-socket /var/run/docker.sock http://localhost/tasks 2>/dev/null
  '''
]

[inspect-service]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  require_args service,
  swarm_print_service_overview $service,
]

[inspect-image]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  require_args service,
  swarm_print_service_image $service,
]

[service-logs]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  require_args service,
  swarm_print_service_logs $service
]

[rm-services]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  require_args service_prefix,
  "$DOCKER service rm $($DOCKER service ls -q --filter=name=$service_prefix)"
]

[rm-service]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  require_args service,
  "$DOCKER service rm $service"
]

[prune-nodes]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = "$DOCKER node ls --format '{{.ID}} {{.Status}}' | grep Down | cut -d ' ' -f 1 | xargs $DOCKER node rm"

[node-label-set]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  require_args swarmNode label,
  swarm_node_label $swarmNode $label
]

[node-label-rm]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  require_args swarmNode labelkey,
  swarm_node_label_rm $swarmNode $labelkey
]

[node-promote]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  require_args swarmNode,
  $DOCKER node promote $swarmNode
]

[node-demote]
source = . $scripts/swarm/swarm.sh
if = is_swarm_manager
exec = [
  require_args swarmNode,
  $DOCKER node demote $swarmNode
]

[docker-stats]
source = . $scripts/swarm/swarm.sh
exec = [
  $DOCKER stats --no-stream --no-trunc
]

[allocate]
source = [
  . $scripts/iaas/all.sh,
  . $scripts/random/random.sh
]
spawn = pty
exec = [
  require_args iaascfg, # pass `cbprefix' or `cbuser' to alter default node prefix or user
  'provider=`echo $iaascfg | cut -d "_" -f 1`',
  'read region specs distro passwd <<< $(unpack \$iaas_${iaascfg}_{region,specs,distro,password})',
  'node_label=${cbprefix-$node_prefix}-${cbuser-$admin_name}-$(random_short_token)',
  '${provider}_node_create $passwd $node_label $region $specs $distro',
  'echo Allocated node: $node_label',
  export node_label
]

[install]
source = [
  . $scripts/iaas/all.sh,
  . $scripts/ssh/ssh.sh,
  . $scripts/swarm/swarm.sh
]
spawn = pty
user = root # for ssh-copy-id to find identity file.
exec = [
  # pass typeIP=private for private connection
  require_args iaascfg node_label node_usage,
  # unpack parameters
  'provider=`echo $iaascfg | cut -d "_" -f 1`',
  'read passwd port <<< $(unpack \$iaas_${iaascfg}_{password,ssh_port})',
  'read docker_mirror <<< $(unpack \$iaas_${provider}_docker_mirror)',
  # get node ID and IP
  'nodeID=`${provider}_node_filter_by_label $node_label`',
  'nodeIP=`${provider}_node_map_ipaddr $nodeID ${typeIP-public}`',
  # refresh local known host list
  ssh-keygen -R $nodeIP,
  # allow ssh login from this host to new remote peer
  '$scripts/ssh/ssh-copy-id.expect root@$nodeIP 22 $passwd',
  '$scripts/ssh/ssh-copy-id.expect root@$nodeIP $port $passwd',
  # change remote sshd port
  sshd_change_port root@$nodeIP 22 $port,
  # install Docker engine and environment
  'read install_hooks <<< $(unpack \${!node_usage_${node_usage}_install_hooks_@})',
  'swarm_install root@$nodeIP $port $iaascfg $docker_mirror $node_label $install_hooks',
  # export node IP address
  export nodeIP
]
dep = swarm:allocate

[bootstrap_localmock]
source = [
  . $scripts/iaas/all.sh,
  . $scripts/swarm/swarm.sh
]
exec = [
  require_args node_usage,

  # initialize Docker warm for the first time
  $DOCKER swarm init,

  # set label for this root swarm manager
  'swarmNode=$(swarm_node_id)',
  'read labels <<< $(unpack \${!node_usage_${node_usage}_labels_@})',
  '''
  for l in $labels; do
    swarm_node_label $swarmNode ${!l};
  done
  ''',

  # setup bootstrap services
  cp $_config_file_ $service_bootstrap_config_path,
  '''
  for argvar in $(eval echo \${!service_bootstrap_services_@}); do
    dockerimg=$(unpack \$service_${!argvar}_docker_image)
    use_image=$(echo $dockerimg | cut -d '/' -f 2)
    swarm_service_create ${!argvar} $use_image
  done
  '''
]

# Use this to bootstrap service and update bootstraping configs
[bootstrap]
source = [
  . $scripts/iaas/all.sh,
  . $scripts/swarm/swarm.sh
]
exec = [
  require_args iaascfg nodeIP node_usage,

  # unpack parameters
  'read port <<< $(unpack \$iaas_${iaascfg}_ssh_port)',

  # initialize Docker warm for the first time
  $SSH -p $port root@$nodeIP $DOCKER swarm init,

  # set label for this root swarm manager
  'swarmNode=$(ssh_exec_local_cmd root@$nodeIP $port  swarm_node_id)',
  'read labels <<< $(unpack \${!node_usage_${node_usage}_labels_@})',
  '''
  for l in $labels; do
    ssh_exec_local_cmd root@$nodeIP $port  swarm_node_label $swarmNode ${!l};
  done
  ''',

  # setup bootstrap services
  $SCP -P $port $_config_file_ root@$nodeIP:$service_bootstrap_config_path,
  '''
  for argvar in $(eval echo \${!service_bootstrap_services_@}); do
    ssh_exec_local_cmd root@$nodeIP $port  swarm_service_create ${!argvar}
  done
  ''',

  # finally, print node IP
  'echo Bootstrap finished, now try:',
  'echo "`tput bold;tput setaf 7` node cli.js http://$nodeIP -j swarm:list-nodes `tput sgr0`"'
  'echo View log from the first task:',
  'echo "`tput bold;tput setaf 7` node cli.js http://$nodeIP --task-log 1 `tput sgr0`"'
]
dep = swarm:install

[bootstrap-update]
source = [
  . $scripts/iaas/all.sh,
  . $scripts/swarm/swarm.sh
]
exec = [
  require_args nodeIP port services,
  ssh-keygen -R $nodeIP,
  $SCP -P $port $_config_file_ root@$nodeIP:$service_bootstrap_config_path,
  '''
  for srv in $(echo $services | tr ',' ' '); do
    echo "=== Updating service $srv ===";
    ssh_exec_local_cmd root@$nodeIP $port  swarm_service_create $srv
  done
  '''
]

[expand]
source = . $scripts/swarm/swarm.sh
exec = [
  require_args iaascfg nodeIP node_usage,
  # unpack parameters
  'read port <<< $(unpack \$iaas_${iaascfg}_ssh_port)',
  # join the swarm
  'joinCommand=`$DOCKER swarm join-token ${role-worker} | grep token`',
  $SSH -p $port root@$nodeIP $joinCommand,

  # set label for this new swarm node
  'swarmNode=$(ssh_exec_local_cmd root@$nodeIP $port  swarm_node_id)',
  'read labels <<< $(unpack \${!node_usage_${node_usage}_labels_@})',
  '''
  for l in $labels; do
    swarm_node_label $swarmNode ${!l};
  done
  '''
]
dep = swarm:install

[service-create]
source = [
  . $scripts/iaas/all.sh,
  . $scripts/swarm/swarm.sh
]
if = is_swarm_manager
exec = [
  require_args service,
  swarm_service_create $service
]

[service-update]
source = [
  . $scripts/iaas/all.sh,
  . $scripts/swarm/swarm.sh
]
if = is_swarm_manager
exec = [
  require_args service,
  'swarm_service_update $service'
]
